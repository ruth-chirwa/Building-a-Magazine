*,
 *::before, 
 *::after {
   padding: 0;
   margin: 0;
   box-sizing: border-box;
}
html{
    font-size: 62.5%;
  }
  body{
    font-family: Baskervville, serif;
    color: linen;
    background-color: rgb(20, 30, 40);
  }
  h1{
    font-family: Anton, sans-serif;
  }
  h2, h3, h4, h5, h6{
    font-family: Raleway, sans-serif;
  }
  a{
    text-decoration: none;
    color: linen;
  }
  main{
    display: grid;
    grid-template-columns: minmax(2rem, 1fr) minmax(min-content, 94rem) minmax(2rem, 1fr);
    /*Use the minmax function to make your columns responsive on any device. 
    The minmax function takes two arguments,the first being the minimum value 
    and the second being the maximum. These values could be a length, percentage,
     fr, or even a keyword like max-content.*/

     /*To add space between rows in the grid layout, you can use the*/
     row-gap: 3rem;
  }
  .heading {
    grid-column: 2 / 3;
    display: grid;

    /*The CSS repeat() function is used to repeat a value,
     rather than writing it out manually, and is helpful for grid layouts.*/
     grid-template-columns: repeat(2, 1fr);
  row-gap: 1.5rem;
  }

  .text{
    grid-column: 2 / 3;
 }

 .hero{
    grid-column: 1 / -1;
    position: relative;
  }
  img{
    width: 100%;
    /*The object-fit property tells the browser how to position the element within its container. 
    In this case, cover will set the image to fill the container, cropping as needed to avoid changing the aspect ratio.*/
    object-fit: cover;
  }
  .hero-title{
    text-align: center;
    color: orangered;
    font-size: 8rem;
  }